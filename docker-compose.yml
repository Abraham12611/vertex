version: "3.9"

services:
  # PostgreSQL database
  postgres:
    image: pgvector/pgvector:0.7.4-pg15
    container_name: vertex-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-vertex_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vertex_password}
      POSTGRES_DB: ${POSTGRES_DB:-vertex_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vertex_user} -d ${POSTGRES_DB:-vertex_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: vertex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker for background tasks
  celery-worker:
    build: ./apps/api
    container_name: vertex-celery-worker
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker.celery_worker worker --loglevel=info
    volumes:
      - ./apps/api:/code
    restart: unless-stopped
    environment:
      - C_FORCE_ROOT=true

  # Celery beat for scheduled tasks
  celery-beat:
    build: ./apps/api
    container_name: vertex-celery-beat
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A worker.celery_worker beat --loglevel=info
    volumes:
      - ./apps/api:/code
    restart: unless-stopped
    environment:
      - C_FORCE_ROOT=true

  # Flower for Celery monitoring
  flower:
    build: ./apps/api
    container_name: vertex-flower
    env_file: .env
    depends_on:
      - redis
      - celery-worker
    command: celery -A worker.celery_worker flower --port=5555
    ports:
      - "5555:5555"
    restart: unless-stopped

  # FastAPI application
  api:
    build: ./apps/api
    container_name: vertex-api
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./apps/api:/code
      - ./uploads:/code/uploads
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - PYTHONPATH=/code
      - ENVIRONMENT=development

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: vertex-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: vertex-network
